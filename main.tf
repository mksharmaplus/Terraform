#aws
provider "aws" {
    region = "us-east-2"
  
}

#############################generated key #######

variable "generated_key_name" {
  type        = string
  default     = "terraform-key-pair"
  description = "Key-pair generated by Terraform"
}

resource "tls_private_key" "dev_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "aws_key_pair" "generated_key" {
  key_name   = var.generated_key_name
  public_key = tls_private_key.dev_key.public_key_openssh

  provisioner "local-exec" {    # Generate "terraform-key-pair.pem" in current directory
    command = <<-EOT
      echo '${tls_private_key.dev_key.private_key_pem}' > ./'${var.generated_key_name}'.pem
      chmod 400 ./'${var.generated_key_name}'.pem
    EOT
  }

}

resource "aws_vpc" "terra-vpc" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "terra-vpc-main"
  }
}



###############################internet_gateway#############################
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.terra-vpc.id

  tags = {
    Name = "igw-main"
  }
}

resource "aws_subnet" "terr-sub-main" {
  vpc_id     = aws_vpc.terra-vpc.id
  cidr_block = "10.0.1.0/24"

  tags = {
    Name = "main-subnet-modify"
  }
}

###############################Route table ##############################
resource "aws_route_table" "route-table" {
  vpc_id = aws_vpc.terra-vpc.id

  route = []

  tags = {
    Name = "terr_route_table"
  }
}

####################################route####################################
resource "aws_route" "route" {
  route_table_id            = aws_route_table.route-table.id
  destination_cidr_block    = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.igw.id
  depends_on                = [aws_route_table.route-table]
}


#####################################security-group##########################

resource "aws_security_group" "allow_tls" {
  name        = "allow_all_traffic"
  description = "Allow all inbound traffic"
  vpc_id      = aws_vpc.terra-vpc.id

  ingress {
    description      = "all traffic"
    from_port        = 0 # all ports
    to_port          = 0 # all ports
    protocol         = "-1" # all traffic
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = null
    prefix_list_ids = null
    security_groups = null
    self = null
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
    description = "Outbound rule"
    prefix_list_ids = null
    security_groups = null
    self = null
  }

  tags = {
    Name = "allow_traffic"
  }
}

####################route_table_association########################

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.terr-sub-main.id
  route_table_id = aws_route_table.route-table.id
}

#################################EC2 instance######################
resource "aws_instance" "web" {
  ami           = "ami-037774efca2da0726"
  instance_type = "t2.micro"
  associate_public_ip_address = true
  subnet_id = aws_subnet.terr-sub-main.id # infomration creation in ec2 in the subnet
  key_name   = "terraform-key-pair"
  tags = {
    Name = "website"
  }



 user_data = <<-EOF
             #!/bin/bash
             sudo dnf update
             sudo dnf install -y nginx
             sudo systemctl start nginx
             sudo systemctl enable nginx
             echo '<!doctype html>
             <html lang="en"><h1>Register!</h1></br>
             <h3>(Instance C)</h3>
             </html>' | sudo tee /var/www/html/index.html
             echo 'server {
                       listen 80 default_server;
                       listen [::]:80 default_server;
                       root /var/www/html;
                       index index.html index.htm index.nginx-debian.html;
                       server_name _;
                       location /register/ {
                           alias /var/www/html/;
                           index index.html;
                       }
                       location / {
                           try_files $uri $uri/ =404;
                       }
                   }' | sudo tee /etc/nginx/sites-available/default
             sudo systemctl reload nginx
             EOF

}
